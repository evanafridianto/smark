!(function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ?
        e(exports, require("bootstrap"), require("jquery")) :
        "function" == typeof define && define.amd ?
        define(["exports", "bootstrap", "jquery"], e) :
        e(((t = t || self).bootprompt = {}), null, t.$);
})(this, function(t, e, o) {
    "use strict";
    o = o && o.hasOwnProperty("default") ? o.default : o;
    var r = function() {
            return (r =
                Object.assign ||
                function(t) {
                    for (var e, o = 1, r = arguments.length; o < r; o++)
                        for (var n in (e = arguments[o]))
                            Object.prototype.hasOwnProperty.call(e, n) &&
                            (t[n] = e[n]);
                    return t;
                }).apply(this, arguments);
        },
        n = function(t, e, o, r) {
            return new(o || (o = Promise))(function(n, a) {
                function i(t) {
                    try {
                        s(r.next(t));
                    } catch (t) {
                        a(t);
                    }
                }

                function l(t) {
                    try {
                        s(r.throw(t));
                    } catch (t) {
                        a(t);
                    }
                }

                function s(t) {
                    t.done ?
                        n(t.value) :
                        new o(function(e) {
                            e(t.value);
                        }).then(i, l);
                }
                s((r = r.apply(t, e || [])).next());
            });
        },
        a = function(t, e) {
            var o,
                r,
                n,
                a,
                i = {
                    label: 0,
                    sent: function() {
                        if (1 & n[0]) throw n[1];
                        return n[1];
                    },
                    trys: [],
                    ops: [],
                };
            return (
                (a = { next: l(0), throw: l(1), return: l(2) }),
                "function" == typeof Symbol &&
                (a[Symbol.iterator] = function() {
                    return this;
                }),
                a
            );

            function l(a) {
                return function(l) {
                    return (function(a) {
                        if (o)
                            throw new TypeError(
                                "Generator is already executing."
                            );
                        for (; i;)
                            try {
                                if (
                                    ((o = 1),
                                        r &&
                                        (n =
                                            2 & a[0] ?
                                            r.return :
                                            a[0] ?
                                            r.throw ||
                                            ((n = r.return) && n.call(r),
                                                0) :
                                            r.next) &&
                                        !(n = n.call(r, a[1])).done)
                                )
                                    return n;
                                switch (
                                    ((r = 0),
                                        n && (a = [2 & a[0], n.value]),
                                        a[0])
                                ) {
                                    case 0:
                                    case 1:
                                        n = a;
                                        break;
                                    case 4:
                                        return (
                                            i.label++, { value: a[1], done: !1 }
                                        );
                                    case 5:
                                        i.label++, (r = a[1]), (a = [0]);
                                        continue;
                                    case 7:
                                        (a = i.ops.pop()), i.trys.pop();
                                        continue;
                                    default:
                                        if (!(n =
                                                (n = i.trys).length > 0 &&
                                                n[n.length - 1]) &&
                                            (6 === a[0] || 2 === a[0])
                                        ) {
                                            i = 0;
                                            continue;
                                        }
                                        if (
                                            3 === a[0] &&
                                            (!n || (a[1] > n[0] && a[1] < n[3]))
                                        ) {
                                            i.label = a[1];
                                            break;
                                        }
                                        if (6 === a[0] && i.label < n[1]) {
                                            (i.label = n[1]), (n = a);
                                            break;
                                        }
                                        if (n && i.label < n[2]) {
                                            (i.label = n[2]), i.ops.push(a);
                                            break;
                                        }
                                        n[2] && i.ops.pop(), i.trys.pop();
                                        continue;
                                }
                                a = e.call(t, i);
                            } catch (t) {
                                (a = [6, t]), (r = 0);
                            } finally {
                                o = n = 0;
                            }
                        if (5 & a[0]) throw a[1];
                        return { value: a[0] ? a[1] : void 0, done: !0 };
                    })([a, l]);
                };
            }
        },
        i = function(t) {
            var e = "function" == typeof Symbol && t[Symbol.iterator],
                o = 0;
            return e ?
                e.call(t) :
                {
                    next: function() {
                        return (
                            t && o >= t.length && (t = void 0), { value: t && t[o++], done: !t }
                        );
                    },
                };
        },
        l = ["OK", "CANCEL", "CONFIRM"],
        s = Object.create(null),
        c = {
            dialog: '<div class="bootprompt modal" tabindex="-1" role="dialog" aria-hidden="true"> <div class="modal-dialog">  <div class="modal-content">   <div class="modal-body"><div class="bootprompt-body"></div></div>  </div> </div></div>',
            header: '<div class="modal-header"> <h5 class="modal-title"></h5></div>',
            footer: '<div class="modal-footer"></div>',
            closeButton: '\n<button type="button" class="bootprompt-close-button close" aria-hidden="true">&times;</button>',
            form: '<form class="bootprompt-form"></form>',
            button: '<button type="button" class="btn"></button>',
            option: "<option></option>",
            promptMessage: '<div class="bootprompt-prompt-message"></div>',
            inputs: {
                text: '<input class="bootprompt-input bootprompt-input-text form-control" autocomplete="off" type="text" />',
                textarea: '<textarea class="bootprompt-input bootprompt-input-textarea form-control"></textarea>',
                email: '<input class="bootprompt-input bootprompt-input-email form-control" autocomplete="off" type="email" />',
                select: '<select class="bootprompt-input bootprompt-input-select form-control"></select>',
                checkbox: '<div class="form-check checkbox"><label class="form-check-label"> <input class="form-check-input bootprompt-input bootprompt-input-checkbox"\n        type="checkbox" /></label></div>',
                radio: '<div class="form-check radio"><label class="form-check-label"><input class="form-check-input bootprompt-input bootprompt-input-radio"        type="radio" name="bootprompt-radio" /></label></div>',
                date: '<input class="bootprompt-input bootprompt-input-date form-control" autocomplete="off" type="date" />',
                time: '<input class="bootprompt-input bootprompt-input-time form-control" autocomplete="off" type="time" />',
                number: '<input class="bootprompt-input bootprompt-input-number form-control"        autocomplete="off" type="number" />',
                password: '<input class="bootprompt-input bootprompt-input-password form-control" autocomplete="off" type="password" />',
                range: '<input class="bootprompt-input bootprompt-input-range form-control-range"\nautocomplete="off" type="range" />',
            },
        },
        p = "en",
        u = !0;

    function d(t, e) {
        var o, r;
        try {
            for (var n = i(l), a = n.next(); !a.done; a = n.next()) {
                var c = a.value;
                if ("string" != typeof e[c])
                    throw new Error(
                        'Please supply a translation for "' + c + '"'
                    );
            }
        } catch (t) {
            o = { error: t };
        } finally {
            try {
                a && !a.done && (r = n.return) && r.call(n);
            } finally {
                if (o) throw o.error;
            }
        }
        s[t] = e;
    }
    var f = o.fn.modal;
    if (void 0 === f)
        throw new Error(
            '"$.fn.modal" is not defined; please double check you have included the Bootstrap JavaScript library. See http://getbootstrap.com/javascript/ for more details.'
        );
    if (!f.Constructor.VERSION)
        throw new Error(
            "Bootprompt cannot determine the version of Bootstrap used"
        );
    var m = f.Constructor.VERSION,
        v = Number(m.substring(0, m.indexOf(".")));
    if (v < 3)
        throw new Error("Bootprompt does not work with Bootstrap 2 and lower.");

    function b(t) {
        var e,
            n,
            a,
            l,
            s = (function(t) {
                if ("object" != typeof t)
                    throw new Error("Please supply an object of options");
                if (void 0 === t.message)
                    throw new Error("Please specify a message");
                var e = r({
                            locale: p,
                            backdrop: "static",
                            animate: u,
                            closeButton: !0,
                            show: !0,
                            container: document.body,
                        },
                        t
                    ),
                    o = e.buttons;
                void 0 === o && (o = e.buttons = Object.create(null));
                var n = Object.keys(o).length,
                    a = 0;
                for (var i in o) {
                    var l = o[i];
                    if (
                        ("function" == typeof l && (l = o[i] = { callback: l }),
                            "object" != typeof l)
                    )
                        throw new Error(
                            'button with key "' + i + '" must be an object'
                        );
                    if (
                        (void 0 === l.label && (l.label = i),
                            void 0 === l.className)
                    ) {
                        var s = a === (!0 === e.swapButtonOrder ? 0 : n - 1);
                        l.className =
                            n <= 2 && s ?
                            "btn-primary" :
                            "btn-secondary btn-default";
                    }
                    a++;
                }
                return e;
            })(t),
            d = o(c.dialog),
            f = d[0],
            b = f.getElementsByClassName("modal-dialog")[0],
            h = f.getElementsByClassName("modal-body")[0],
            y = o(c.footer)[0],
            w = { onEscape: s.onEscape, onClose: s.onClose };
        void 0 === w.onEscape && (w.onEscape = !0);
        var g = s.buttons,
            k = s.backdrop,
            x = s.className,
            E = s.closeButton,
            O = s.message,
            N = s.size,
            B = s.title,
            L = h.getElementsByClassName("bootprompt-body")[0];
        "string" == typeof O
            ?
            (L.innerHTML = O) :
            ((L.innerHTML = ""), o(L).append(O));
        var q = !1;
        for (var S in g) {
            q = !0;
            var T = g[S],
                j = o(c.button),
                M = j[0];
            j.data("bp-handler", S);
            try {
                for (
                    var P = i(T.className.split(" ")), A = P.next(); !A.done; A = P.next()
                ) {
                    var H = A.value;
                    M.classList.add(H);
                }
            } catch (t) {
                e = { error: t };
            } finally {
                try {
                    A && !A.done && (n = P.return) && n.call(P);
                } finally {
                    if (e) throw e.error;
                }
            }
            switch (S) {
                case "ok":
                case "confirm":
                    M.classList.add("bootprompt-accept");
                    break;
                case "cancel":
                    M.classList.add("bootprompt-cancel");
            }
            (M.innerHTML = T.label), y.appendChild(M), (w[S] = T.callback);
        }
        if (
            (q && h.parentNode.insertBefore(y, h.nextSibling), !0 === s.animate && f.classList.add("fade"),
                void 0 !== x)
        )
            try {
                for (
                    var V = i(x.split(" ")), z = V.next(); !z.done; z = V.next()
                ) {
                    H = z.value;
                    f.classList.add(H);
                }
            } catch (t) {
                a = { error: t };
            } finally {
                try {
                    z && !z.done && (l = V.return) && l.call(V);
                } finally {
                    if (a) throw a.error;
                }
            }
        if (void 0 !== N)
            switch (
                (m.substring(0, 3) < "3.1" &&
                    console.warn(
                        '"size" requires Bootstrap 3.1.0 or higher. You appear to be using ' +
                        m +
                        ". Please upgrade to use this option."
                    ),
                    N)
            ) {
                case "large":
                    b.classList.add("modal-lg");
                    break;
                case "small":
                    b.classList.add("modal-sm");
                    break;
                default:
                    throw new Error("unknown size value: " + N);
            }
        if (void 0 !== B) {
            h.parentNode.insertBefore(o(c.header)[0], h);
            var I = f.getElementsByClassName("modal-title")[0];
            "string" == typeof B
                ?
                (I.innerHTML = B) :
                ((I.innerHTML = ""), o(I).append(B));
        }
        if (!0 === E) {
            var R = o(c.closeButton)[0];
            if (void 0 !== B) {
                var Y = f.getElementsByClassName("modal-header")[0];
                v > 3 ? Y.appendChild(R) : Y.insertBefore(R, Y.firstChild);
            } else h.insertBefore(R, h.firstChild);
        }
        return (
            void 0 !== s.centerVertical &&
            (m < "4.0.0" &&
                console.warn(
                    '"centerVertical" requires Bootstrap 4.0.0 or higher. You appear to be using ' +
                    m +
                    ". Please upgrade to use this option."
                ),
                b.classList.add("modal-dialog-centered")),
            d.one("hidden.bs.modal", function() {
                d.off("escape.close.bp"), d.off("click"), d.remove();
            }),
            d.one("shown.bs.modal", function() {
                o(f.querySelector(".btn-primary")).trigger("focus");
            }),
            "static" !== k &&
            d.on("click.dismiss.bs.modal", function(t) {
                var e = f.getElementsByClassName("modal-backdrop"),
                    o = 0 !== e.length ? e[0] : t.currentTarget;
                t.target === o && d.trigger("escape.close.bp");
            }),
            d.on("escape.close.bp", function(t) {
                (!0 !== w.onEscape && "function" != typeof w.onEscape) ||
                C(t, d, w.onEscape);
            }),
            d.on("click", ".modal-footer button", function(t) {
                var e = o(this).data("bp-handler");
                C(t, d, w[e]);
            }),
            d.on("click", ".bootprompt-close-button", function(t) {
                C(t, d, w.onClose);
            }),
            d.on("keyup", function(t) {
                27 === t.which && d.trigger("escape.close.bp");
            }),
            o(s.container).append(d),
            d.modal({
                backdrop: (!0 === k || "static" === k) && "static",
                keyboard: !1,
                show: !1,
            }), !0 === s.show && d.modal("show"),
            d
        );
    }

    function h(t, e) {
        var o = O("alert", ["ok"], t, e),
            r = o.callback;
        if (void 0 !== r && "function" != typeof r)
            throw new Error(
                "alert requires callback property to be a function when provided"
            );
        var n = function() {
            return "function" != typeof r || r.call(this);
        };
        return (o.buttons.ok.callback = n), k(o, n), b(o);
    }

    function y(t, e) {
        var o = O("confirm", ["cancel", "confirm"], t, e),
            r = o.callback,
            n = o.buttons;
        if ("function" != typeof r)
            throw new Error("confirm requires a callback");
        var a = function() {
            return r.call(this, !1);
        };
        return (
            (n.cancel.callback = a),
            k(o, a),
            (n.confirm.callback = function() {
                return r.call(this, !0);
            }),
            b(o)
        );
    }

    function w(t) {
        var e, o;
        try {
            for (var r = i(t), n = r.next(); !n.done; n = r.next()) {
                var a = n.value,
                    l = a.value,
                    s = a.text;
                if (void 0 === l || void 0 === s)
                    throw new Error(
                        'each option needs a "value" and a "text" property'
                    );
                if ("number" == typeof l)
                    throw new Error(
                        'bootprompt does not allow numbers for "value" in inputOptions'
                    );
            }
        } catch (t) {
            e = { error: t };
        } finally {
            try {
                n && !n.done && (o = r.return) && o.call(r);
            } finally {
                if (e) throw e.error;
            }
        }
    }

    function g(t, e) {
        var r = O("prompt", ["cancel", "confirm"], t, e);
        if ("number" == typeof r.value)
            throw new Error("bootprompt does not allow numbers as values");
        var n = void 0 === r.show || r.show;
        if (((r.show = !1), void 0 === r.title || "" === r.title))
            throw new Error("prompt requires a title");
        var a = r.callback,
            l = r.buttons;
        if ("function" != typeof a)
            throw new Error("prompt requires a callback");
        void 0 === r.inputType && (r.inputType = "text");
        var s,
            p = c.inputs[r.inputType];
        switch (r.inputType) {
            case "text":
            case "textarea":
            case "email":
            case "password":
                (function(t, e) {
                    var o = e.value,
                        r = e.placeholder,
                        n = e.pattern,
                        a = e.maxlength,
                        i = e.required;
                    t.val(o),
                        void 0 !== r && t.attr("placeholder", r),
                        void 0 !== n && t.attr("pattern", n),
                        void 0 !== a && t.attr("maxlength", a), !0 === i && t.prop({ required: !0 });
                })((s = o(p)), r);
                break;
            case "date":
            case "time":
            case "number":
            case "range":
                (function(t, e) {
                    var o = e.value,
                        r = e.placeholder,
                        n = e.pattern,
                        a = e.required,
                        i = e.inputType;
                    if (
                        (void 0 !== o && t.val(String(o)),
                            void 0 !== r && t.attr("placeholder", r),
                            void 0 !== n && t.attr("pattern", n), !0 === a && t.prop({ required: !0 }),
                            "date" !== i)
                    ) {
                        var l = e.step;
                        if (void 0 !== l) {
                            var s = Number(l);
                            if (!("any" === l || (!isNaN(s) && s > 0)))
                                throw new Error(
                                    '"step" must be a valid positive number or the value "any". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step for more information.'
                                );
                            t.attr("step", l);
                        }
                    }
                    B(t, "min", e), B(t, "max", e);
                })((s = o(p)), r);
                break;
            case "select":
                (function(t, e) {
                    var r,
                        n,
                        a = void 0 !== e.inputOptions ? e.inputOptions : [];
                    if (!Array.isArray(a))
                        throw new Error(
                            "Please pass an array of input options"
                        );
                    if (0 === a.length)
                        throw new Error(
                            "prompt with select requires at least one option value"
                        );
                    var l,
                        s = e.required,
                        p = e.multiple;
                    !0 === s && t.prop({ required: !0 }), !0 === p && t.prop({ multiple: !0 }),
                        w(a);
                    var u = Object.create(null);
                    try {
                        for (
                            var d = i(a), f = d.next(); !f.done; f = d.next()
                        ) {
                            var m = f.value,
                                v = m.value,
                                b = m.text,
                                h = m.group,
                                y = t[0];
                            if (void 0 !== h && "" !== h) {
                                var g = u[h];
                                void 0 === g &&
                                    ((u[h] = g =
                                            document.createElement("optgroup")),
                                        g.setAttribute("label", h)),
                                    (y = g);
                            }
                            var k = o(c.option);
                            k.attr("value", v).text(b),
                                y.appendChild(k[0]),
                                void 0 === l && (l = v);
                        }
                    } catch (t) {
                        r = { error: t };
                    } finally {
                        try {
                            f && !f.done && (n = d.return) && n.call(d);
                        } finally {
                            if (r) throw r.error;
                        }
                    }
                    if (void 0 === l)
                        throw new Error(
                            "firstValue cannot be undefined at this point"
                        );
                    for (var x in u) t.append(u[x]);
                    t.val(void 0 !== e.value ? e.value : l);
                })((s = o(p)), r);
                break;
            case "checkbox":
                (function(t, e, r) {
                    var n,
                        a,
                        l = Array.isArray(e.value) ? e.value : [e.value],
                        s = void 0 !== e.inputOptions ? e.inputOptions : [];
                    if (0 === s.length)
                        throw new Error(
                            "prompt with checkbox requires options"
                        );
                    w(s);
                    try {
                        for (
                            var c = i(s), p = c.next(); !p.done; p = c.next()
                        ) {
                            var u = p.value,
                                d = u.value,
                                f = u.text,
                                m = o(r);
                            m.find("input").attr("value", d),
                                m.find("label").append("\n" + f), -1 !== l.indexOf(d) &&
                                m.find("input").prop("checked", !0),
                                t.append(m);
                        }
                    } catch (t) {
                        n = { error: t };
                    } finally {
                        try {
                            p && !p.done && (a = c.return) && a.call(c);
                        } finally {
                            if (n) throw n.error;
                        }
                    }
                })(
                    (s = o('<div class="bootprompt-checkbox-list"></div>')),
                    r,
                    p
                );
                break;
            case "radio":
                (function(t, e, r) {
                    var n,
                        a,
                        l = e.value;
                    if (void 0 !== l && Array.isArray(l))
                        throw new Error(
                            'prompt with radio requires a single, non-array value for "value".'
                        );
                    var s = void 0 !== e.inputOptions ? e.inputOptions : [];
                    if (0 === s.length)
                        throw new Error("prompt with radio requires options");
                    w(s);
                    var c = !0;
                    try {
                        for (
                            var p = i(s), u = p.next(); !u.done; u = p.next()
                        ) {
                            var d = u.value,
                                f = d.value,
                                m = d.text,
                                v = o(r);
                            v.find("input").attr("value", f),
                                v.find("label").append("\n" + m),
                                void 0 !== l &&
                                f === l &&
                                (v.find("input").prop("checked", !0),
                                    (c = !1)),
                                t.append(v);
                        }
                    } catch (t) {
                        n = { error: t };
                    } finally {
                        try {
                            u && !u.done && (a = p.return) && a.call(p);
                        } finally {
                            if (n) throw n.error;
                        }
                    }
                    c &&
                        t
                        .find("input[type='radio']")
                        .first()
                        .prop("checked", !0);
                })(
                    (s = o("<div class='bootprompt-radiobutton-list'></div>")),
                    r,
                    p
                );
                break;
            default:
                var u = r.inputType;
                throw new Error("Unknown input type: " + u);
        }
        var d = function() {
            return a.call(this, null);
        };
        (l.cancel.callback = d),
        k(r, d),
            (l.confirm.callback = function() {
                var t;
                switch (r.inputType) {
                    case "checkbox":
                        t = s
                            .find("input:checked")
                            .map(function() {
                                return o(this).val();
                            })
                            .get();
                        break;
                    case "radio":
                        t = s.find("input:checked").val();
                        break;
                    default:
                        var e = s[0];
                        if (void 0 !== e.checkValidity && !e.checkValidity())
                            return !1;
                        t =
                            "select" === r.inputType && !0 === r.multiple ?
                            s
                            .find("option:selected")
                            .map(function() {
                                return o(this).val();
                            })
                            .get() :
                            s.val();
                }
                return a.call(this, t);
            });
        var f = o(c.form);
        f.append(s);
        var m = r.message;
        "string" == typeof m &&
            "" !== m.trim() &&
            f.prepend(o(c.promptMessage).html(m)),
            (r.message = f);
        var v = b(r);
        return (
            f.on("submit", function(t) {
                t.preventDefault(),
                    t.stopPropagation(),
                    v.find(".bootprompt-accept").trigger("click");
            }),
            v.off("shown.bs.modal").on("shown.bs.modal", function() {
                s.focus();
            }), !0 === n && v.modal("show"),
            v
        );
    }

    function k(t, e) {
        var o = t.onEscape,
            r = t.onClose;
        (t.onEscape =
            void 0 === o || !0 === o ?
            e :
            function(t) {
                return (!1 !== o && !1 !== o.call(this, t) && e.call(this, t));
            }),
        (t.onClose =
            void 0 === r ?
            e :
            function(t) {
                return !1 !== r.call(this, t) && e.call(this, t);
            });
    }

    function x(t, e) {
        var o = s[e];
        return void 0 !== o ? o[t] : s.en[t];
    }

    function E(t, e) {
        var o,
            r,
            n = Object.create(null);
        try {
            for (var a = i(t), l = a.next(); !l.done; l = a.next()) {
                var s = l.value;
                n[s.toLowerCase()] = { label: x(s.toUpperCase(), e) };
            }
        } catch (t) {
            o = { error: t };
        } finally {
            try {
                l && !l.done && (r = a.return) && r.call(a);
            } finally {
                if (o) throw o.error;
            }
        }
        return n;
    }

    function O(t, e, r, n) {
        for (var a in r.buttons)
            if (-1 === e.indexOf(a))
                throw new Error(
                    'button key "' +
                    a +
                    '" is not allowed (options are ' +
                    e.join(" ") +
                    ")"
                );
        var i = r.locale,
            l = r.swapButtonOrder;
        return o.extend(!0,
            Object.create(null), {
                className: "bootprompt-" + t,
                buttons: E(!0 === l ? e.slice().reverse() : e,
                    void 0 !== i ? i : p
                ),
            },
            r, { callback: n }
        );
    }

    function N(t) {
        throw new Error(
            '"max" must be greater than "min". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-' +
            t +
            " for more information."
        );
    }

    function C(t, e, o) {
        t.stopPropagation(),
            t.preventDefault(),
            ("function" == typeof o && !1 === o.call(e, t)) || e.modal("hide");
    }

    function B(t, e, o) {
        var r = o[e];
        if (void 0 !== r) {
            var n = o["min" === e ? "max" : "min"];
            t.attr(e, r);
            var a = o.min,
                i = o.max;
            switch (o.inputType) {
                case "date":
                    /(\d{4})-(\d{2})-(\d{2})/.test(r) ||
                        console.warn(
                            'Browsers which natively support the "date" input type expect date values to be of the form "YYYY-MM-DD" (see ISO-8601 https://www.iso.org/iso-8601-date-and-time-format.html). Bootprompt does not enforce this rule, but your ' +
                            e +
                            " value may not be enforced by this browser."
                        );
                    break;
                case "time":
                    if (!/([01][0-9]|2[0-3]):[0-5][0-9]?:[0-5][0-9]/.test(r))
                        throw new Error(
                            '"' +
                            e +
                            '" is not a valid time. See https://www.w3.org/TR/2012/WD-html-markup-20120315/datatypes.html#form.data.time for more information.'
                        );
                    if (!(void 0 === n || i > a)) return N(e);
                    break;
                default:
                    if (isNaN(r))
                        throw new Error(
                            '"' +
                            e +
                            '" must be a valid number. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-' +
                            e +
                            " for more information."
                        );
                    var l = Number(a),
                        s = Number(i);
                    if (!(void 0 === n || s > l || isNaN(n))) return N(e);
            }
        }
    }
    d("en", { OK: "OK", CANCEL: "Cancel", CONFIRM: "OK" }),
        (t.VERSION = "6.0.2"),
        (t.addLocale = d),
        (t.alert = function(t, e) {
            return h("string" == typeof t ? { message: t } : t, e);
        }),
        (t.alert$ = function(t) {
            return n(this, void 0, void 0, function() {
                return a(this, function(e) {
                    return [
                        2,
                        new Promise(function(e) {
                            h(
                                "string" == typeof t ? { message: t } : t,
                                void 0
                            ).one("hidden.bs.modal", function() {
                                e();
                            });
                        }),
                    ];
                });
            });
        }),
        (t.confirm = function(t, e) {
            return y("string" == typeof t ? { message: t } : t, e);
        }),
        (t.confirm$ = function(t) {
            return n(this, void 0, void 0, function() {
                return a(this, function(e) {
                    return [
                        2,
                        new Promise(function(e) {
                            var o = "string" == typeof t ? { message: t } : t,
                                r = o.callback,
                                n = null;
                            y(o, function(t) {
                                if (((n = t), void 0 !== r))
                                    return r.call(this, n);
                            }).one("hidden.bs.modal", function() {
                                e(n);
                            });
                        }),
                    ];
                });
            });
        }),
        (t.dialog = b),
        (t.hideAll = function() {
            o(".bootprompt").modal("hide");
        }),
        (t.locales = function(t) {
            return void 0 !== t ? s[t] : s;
        }),
        (t.prompt = function(t, e) {
            return g("string" == typeof t ? { title: t } : t, e);
        }),
        (t.prompt$ = function(t) {
            return n(this, void 0, void 0, function() {
                return a(this, function(e) {
                    return [
                        2,
                        new Promise(function(e) {
                            var o = "string" == typeof t ? { title: t } : t,
                                r = o.callback,
                                n = null;
                            g(o, function(t) {
                                if (((n = t), void 0 !== r))
                                    return r.call(this, n);
                            }).one("hidden.bs.modal", function() {
                                e(n);
                            });
                        }),
                    ];
                });
            });
        }),
        (t.removeLocale = function(t) {
            if ("en" === t)
                throw new Error(
                    '"en" is used as the default and fallback locale and cannot be removed.'
                );
            delete s[t];
        }),
        (t.setAnimate = function(t) {
            u = t;
        }),
        (t.setLocale = function(t) {
            p = t;
        }),
        Object.defineProperty(t, "__esModule", { value: !0 });
});
//# sourceMappingURL=bootprompt.min.js.map